# ==============================================================================
# ARQUIVO DE EXEMPLO .env.example
# ==============================================================================
# Este arquivo é um molde. Copie-o para um arquivo chamado .env
# (que está no .gitignore) e preencha os valores privados lá.
# NUNCA coloque segredos (chaves, senhas) neste arquivo .env.example.
# ==============================================================================


# ==============================================================================
# CONFIGURAÇÃO PRINCIPAL DO DJANGO
# ==============================================================================

# Chave secreta usada pelo Django para criptografia.
# NUNCA preencha este valor no .env.example.
# No seu arquivo .env PRIVADO, gere uma chave com:
# python manage.py shell -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
SECRET_KEY=

# Define se o projeto está em modo de depuração. 
# Em produção (no seu .env privado), defina como False.
DEBUG=True

# Domínios permitidos. Em produção, liste seus domínios.
ALLOWED_HOSTS=127.0.0.1,localhost


# ==============================================================================
# CONFIGURAÇÃO DO BANCO DE DADOS
# ==============================================================================
# O seu settings.py precisará de lógica para escolher UMA das abordagens abaixo.

# --- Abordagem 1: DATABASE_URL (Padrão para Desenvolvimento com SQLite) ---
# (O SQLite não usa usuário, senha, host ou porta, então a URL é mais simples)
DATABASE_URL=sqlite:///data/db.sqlite3


# --- Abordagem 2: Variáveis Individuais (Recomendado para Produção) ---
# (Como você sugeriu, esta é uma forma mais clara para PostgreSQL, MySQL, SQL Server, etc.)
# (Preencha os valores no seu .env privado e comente a DATABASE_URL acima)

# Mude para o driver do seu banco (ex: django.db.backends.postgresql, django.db.backends.mysql, mssql.backend)
# DB_ENGINE=django.db.backends.postgresql

# O nome do seu banco de dados.
# DB_NAME=
 
# O usuário que tem acesso ao banco.
# DB_USER=
 
# A senha deste usuário.
# DB_PASSWORD=
 
# Onde o banco está (ex: localhost, 127.0.0.1, ou um IP/domínio).
# DB_HOST=localhost
 
# A porta do banco.
# (Padrões: PostgreSQL: 5432, MySQL: 3306, SQL Server: 1433)
# DB_PORT=5432


# ==============================================================================
# CONFIGURAÇÃO DE E-MAIL (Opcional)
# ==============================================================================
# (Preencha apenas no seu .env privado)
# EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
# EMAIL_HOST=smtp.gmail.com
# EMAIL_PORT=587
# EMAIL_USE_TLS=True
# EMAIL_HOST_USER=
# EMAIL_HOST_PASSWORD=


# ==============================================================================
# CONFIGURAÇÃO DE CORS (API)
# ==============================================================================
# Domínios que podem fazer requisições à sua API (django-cors-headers).
CORS_ALLOWED_ORIGINS=http://localhost:8000,http://127.0.0.1:8000


# ==============================================================================
# ARQUIVO ESTÁTICO E DE MÍDIA (Produção - Opcional)
# ==============================================================================
# Em produção (DEBUG=False), o Django não serve arquivos estáticos.
# Você usará o WhiteNoise (que já está no projeto) ou um bucket de nuvem (como S3).

# --- Opção 1: WhiteNoise (Mais simples, já instalado) ---
# (Não precisa de variáveis de ambiente extras, apenas configuração no settings.py)


# --- Opção 2: Amazon S3 (Mais robusto, para arquivos de upload) ---
# (Requer o pacote django-storages)
# (Preencha apenas no seu .env privado)
# AWS_ACCESS_KEY_ID=
# AWS_SECRET_ACCESS_KEY=
# AWS_STORAGE_BUCKET_NAME=
# AWS_S3_REGION_NAME=us-east-1
# AWS_S3_CUSTOM_DOMAIN=meu-bucket.s3.amazonaws.com